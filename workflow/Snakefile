import glob
import os

configfile: "config/config.yml"

organisms = set()
for fastq in glob.glob('reads/*/*.f*q*'):
    organisms.add(os.path.split(fastq)[1])
organisms = list(organisms)

bwa_index_extensions = [".amb", ".ann", ".bwt", ".pac", ".sa"]

rule all:
    input:
        flat="results/pst/norfolk1/tree_input/norfolk1.ffn",
        report="results/pst/norfolk1/fastqc_filtered_reads/norfolk1_fastqc.html"

rule bwa_index:
    input: "resources/{organism}/reference/{organism}.fna"
    output:
        multiext(
            "resources/{organism}/reference/{organism}.fna",
            *bwa_index_extensions
        )
    conda: "envs/bwa_samtools.yml"
    log: "logs/{organism}/bwa_index.log"
    shell: "bwa index {input} >{log} 2>&1"


rule bwa_mem:
    input:
        ref="resources/{organism}/reference/{organism}.fna",
        idx=multiext(
            "resources/{organism}/reference/{organism}.fna",
            *bwa_index_extensions
        ),
        fastq="results/{organism}/{sample}/filtered_reads/{sample}.fastq.gz",
    output: "results/{organism}/{sample}/aligned/{sample}.bam"
    conda: "envs/bwa_samtools.yml"
    log: "logs/{organism}/{sample}/bwa_mem_{sample}.log"
    threads: config["bwa_mem_threads"]
    shell: """
    (
        bwa mem -t {threads} {input.ref} {input.fastq} | samtools sort > {output}
    ) >{log} 2>&1
    """

rule samtools_index:
    input: "resources/{organism}/reference/{organism}.fna"
    output: "resources/{organism}/reference/{organism}.fna.fai"
    log: "logs/{organism}/samtools_index.log"
    conda: "envs/bwa_samtools.yml"
    shell: "samtools faidx {input} >{output} 2>{log}"

rule filter_reads:
    input: "reads/{organism}/{sample}.fastq.gz"
    output: "results/{organism}/{sample}/filtered_reads/{sample}.fastq.gz"
    log: "logs/{organism}/{sample}/filter_reads_{sample}.log"
    conda: "envs/nanoq.yml"
    shell: """
        nanoq \
            -m {config[maximum_read_length]} \
            -q {config[minimum_average_read_quality]} \
            -i {input} \
            -o {output} \
            >{log} 2>&1
    """

rule fastqc:
    input: "reads/{organism}/{sample}.fastq.gz"
    output:
        html="results/{organism}/{sample}/fastqc/{sample}_fastqc.html",
        data="results/{organism}/{sample}/fastqc/{sample}_fastqc.zip",
    log: "logs/{organism}/{sample}/fastqc_{sample}.log"
    conda: "envs/fastqc.yml"
    shell: "fastqc -o $(dirname {output.html}) {input} >{log} 2>&1"

use rule fastqc as fastqc_filtered_reads with:
    input: "results/{organism}/{sample}/filtered_reads/{sample}.fastq.gz"
    output:
        html="results/{organism}/{sample}/fastqc_filtered_reads/{sample}_fastqc.html",
        data="results/{organism}/{sample}/fastqc_filtered_reads/{sample}_fastqc.zip"
    log: "logs/{organism}/{sample}/fastqc_filtered_reads_{sample}.log"


rule pileup:
    input:
        ref="resources/{organism}/reference/{organism}.fna",
        idx="resources/{organism}/reference/{organism}.fna.fai",
        bam="results/{organism}/{sample}/aligned/{sample}.bam",
    output: "results/{organism}/{sample}/aligned/{sample}.pileup.gz"
    log: "logs/{organism}/{sample}/pileup_{sample}.log"
    conda: "envs/bwa_samtools.yml"
    shell: "(samtools mpileup -f {input.ref} {input.bam} | gzip -c > {output}) >{log} 2>&1"

rule consensus:
    input:
        pileup="results/{organism}/{sample}/aligned/{sample}.pileup.gz",
        ref="resources/{organism}/reference/{organism}.fna",
    output: 
        consensus="results/{organism}/{sample}/aligned/{sample}.fna",
        snps="results/{organism}/{sample}/snps/{sample}.tsv"
    log: "logs/{organism}/{sample}/consensus_{sample}.log"
    conda: "envs/biopython_pandas.yml"
    script: "scripts/pileup_to_consensus.py"

rule extract_cds:
    input: 
        consensus="results/{organism}/{sample}/aligned/{sample}.fna",
        gff="resources/{organism}/reference/{organism}.gff",
    output: "results/{organism}/{sample}/aligned/{sample}.ffn"
    log: "logs/{organism}/{sample}/extract_cds_{sample}.log"
    conda: "envs/gffread.yml"
    shell: "gffread -x {output} -g {input.consensus} {input.gff} >{log} 2>&1"

rule flatten:
    input: "results/{organism}/{sample}/aligned/{sample}.ffn"
    output: "results/{organism}/{sample}/tree_input/{sample}.ffn"
    log: "logs/{organism}/{sample}/flatten_{sample}.log"
    shell: 
        """
        echo \>{wildcards.sample} > {output}
        grep -v \> {input} | tr -d '\n' >> {output}
        echo >> {output}
        """
